
04-interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002ce  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ed7  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d8  00000000  00000000  00001303  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000443  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00002120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000519  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000171  00000000  00000000  00002739  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000028aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_13>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee ec       	ldi	r30, 0xCE	; 206
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  da:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  e2:	fc 01       	movw	r30, r24
  e4:	40 81       	ld	r20, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_config_output+0xe>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_config_output+0xa>
  f4:	24 2b       	or	r18, r20
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  fa:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  fc:	90 81       	ld	r25, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_low+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_low+0xa>
 10c:	20 95       	com	r18
 10e:	29 23       	and	r18, r25
 110:	20 83       	st	Z, r18
 112:	08 95       	ret

00000114 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
 114:	fc 01       	movw	r30, r24
 116:	40 81       	ld	r20, Z
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <GPIO_write_high+0xe>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <GPIO_write_high+0xa>
 126:	24 2b       	or	r18, r20
 128:	20 83       	st	Z, r18
 12a:	08 95       	ret

0000012c <GPIO_toggle>:
  *           pin_num - Pin designation in the interval 0 to 7
  * Returns:  none
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
 12c:	fc 01       	movw	r30, r24
 12e:	40 81       	ld	r20, Z
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <GPIO_toggle+0xe>
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <GPIO_toggle+0xa>
 13e:	24 27       	eor	r18, r20
 140:	20 83       	st	Z, r18
 142:	08 95       	ret

00000144 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
 144:	65 e0       	ldi	r22, 0x05	; 5
 146:	84 e2       	ldi	r24, 0x24	; 36
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D1);
 14e:	65 e0       	ldi	r22, 0x05	; 5
 150:	85 e2       	ldi	r24, 0x25	; 37
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_low>
    GPIO_config_output(&DDRB, LED_D2);
 158:	64 e0       	ldi	r22, 0x04	; 4
 15a:	84 e2       	ldi	r24, 0x24	; 36
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D2);
 162:	64 e0       	ldi	r22, 0x04	; 4
 164:	85 e2       	ldi	r24, 0x25	; 37
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D3);
 16c:	63 e0       	ldi	r22, 0x03	; 3
 16e:	84 e2       	ldi	r24, 0x24	; 36
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D3);
 176:	63 e0       	ldi	r22, 0x03	; 3
 178:	85 e2       	ldi	r24, 0x25	; 37
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D4);
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	84 e2       	ldi	r24, 0x24	; 36
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D4);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	85 e2       	ldi	r24, 0x25	; 37
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 194:	e1 e8       	ldi	r30, 0x81	; 129
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	80 83       	st	Z, r24
 19e:	80 81       	ld	r24, Z
 1a0:	83 60       	ori	r24, 0x03	; 3
 1a2:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 1a4:	ef e6       	ldi	r30, 0x6F	; 111
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei(); // set interr.
 1ae:	78 94       	sei
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <main+0x6c>

000001b2 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31

    // WRITE YOUR CODE HERE
    //GPIO_toggle(&PORTB, LED_D1); 
    uint8_t token= 1; // changes values +1 and -1
    del += 1 * token;
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    GPIO_toggle(&PORTB, LED_D1);
 1de:	65 e0       	ldi	r22, 0x05	; 5
 1e0:	85 e2       	ldi	r24, 0x25	; 37
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 96 00 	call	0x12c	; 0x12c <GPIO_toggle>
    if(del == 1)
 1e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	a1 f4       	brne	.+40     	; 0x218 <__vector_13+0x66>
    {
        GPIO_write_low(&PORTB, LED_D1);
 1f0:	65 e0       	ldi	r22, 0x05	; 5
 1f2:	85 e2       	ldi	r24, 0x25	; 37
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_low>
        GPIO_write_high(&PORTB, LED_D2);
 1fa:	64 e0       	ldi	r22, 0x04	; 4
 1fc:	85 e2       	ldi	r24, 0x25	; 37
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D3);
 204:	63 e0       	ldi	r22, 0x03	; 3
 206:	85 e2       	ldi	r24, 0x25	; 37
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D4);
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	85 e2       	ldi	r24, 0x25	; 37
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
        token *= -1;
    }
    if(del == 2)
 218:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	a1 f4       	brne	.+40     	; 0x248 <__vector_13+0x96>
    {
        GPIO_write_high(&PORTB, LED_D1);
 220:	65 e0       	ldi	r22, 0x05	; 5
 222:	85 e2       	ldi	r24, 0x25	; 37
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
        GPIO_write_low(&PORTB, LED_D2);
 22a:	64 e0       	ldi	r22, 0x04	; 4
 22c:	85 e2       	ldi	r24, 0x25	; 37
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_low>
        GPIO_write_high(&PORTB, LED_D3);
 234:	63 e0       	ldi	r22, 0x03	; 3
 236:	85 e2       	ldi	r24, 0x25	; 37
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D4);
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	85 e2       	ldi	r24, 0x25	; 37
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
    }
    if(del == 3)
 248:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	a1 f4       	brne	.+40     	; 0x278 <__vector_13+0xc6>
    {
        GPIO_write_low(&PORTB, LED_D1);
 250:	65 e0       	ldi	r22, 0x05	; 5
 252:	85 e2       	ldi	r24, 0x25	; 37
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_low>
        GPIO_write_high(&PORTB, LED_D2);
 25a:	64 e0       	ldi	r22, 0x04	; 4
 25c:	85 e2       	ldi	r24, 0x25	; 37
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D3);
 264:	63 e0       	ldi	r22, 0x03	; 3
 266:	85 e2       	ldi	r24, 0x25	; 37
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D4);
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	85 e2       	ldi	r24, 0x25	; 37
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
    }
    if(del == 4)
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 27c:	84 30       	cpi	r24, 0x04	; 4
 27e:	a1 f4       	brne	.+40     	; 0x2a8 <__vector_13+0xf6>
    {
        GPIO_write_low(&PORTB, LED_D1);
 280:	65 e0       	ldi	r22, 0x05	; 5
 282:	85 e2       	ldi	r24, 0x25	; 37
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_low>
        GPIO_write_high(&PORTB, LED_D2);
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	85 e2       	ldi	r24, 0x25	; 37
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D3);
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	85 e2       	ldi	r24, 0x25	; 37
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D4);
 29e:	62 e0       	ldi	r22, 0x02	; 2
 2a0:	85 e2       	ldi	r24, 0x25	; 37
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_write_high>
            GPIO_write_low(&PORTB, LED_D3);
            GPIO_write_high(&PORTB, LED_D4);
            token *= -1;
    }
    */
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
