
i2c bus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000041a  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800142  00800142  000004f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd2  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000683  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053d  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054e  00000000  00000000  00002aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002ff7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_18>
  4c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 0b 02 	jmp	0x416	; 0x416 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 10 01 	call	0x220	; 0x220 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 99 01 	call	0x332	; 0x332 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	1f 93       	push	r17
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	2c 97       	sbiw	r28, 0x0c	; 12
 106:	de bf       	out	0x3e, r29	; 62
 108:	cd bf       	out	0x3d, r28	; 61
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string_dec[] = "000"; // String for converting numbers by itoa()
 10a:	80 e3       	ldi	r24, 0x30	; 48
 10c:	90 e3       	ldi	r25, 0x30	; 48
 10e:	9a 83       	std	Y+2, r25	; 0x02
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	80 e3       	ldi	r24, 0x30	; 48
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	9c 83       	std	Y+4, r25	; 0x04
 118:	8b 83       	std	Y+3, r24	; 0x03
    char uart_string_bin[] = "0000000";
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	e9 e3       	ldi	r30, 0x39	; 57
 11e:	f1 e0       	ldi	r31, 0x01	; 1
 120:	de 01       	movw	r26, r28
 122:	15 96       	adiw	r26, 0x05	; 5
 124:	01 90       	ld	r0, Z+
 126:	0d 92       	st	X+, r0
 128:	8a 95       	dec	r24
 12a:	e1 f7       	brne	.-8      	; 0x124 <__vector_13+0x4c>
    
    // FSM
    switch (state)
 12c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	c9 f0       	breq	.+50     	; 0x166 <__vector_13+0x8e>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	49 f1       	breq	.+82     	; 0x18a <__vector_13+0xb2>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	09 f0       	breq	.+2      	; 0x13e <__vector_13+0x66>
 13c:	54 c0       	rjmp	.+168    	; 0x1e6 <__vector_13+0x10e>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	98 0f       	add	r25, r24
 146:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
        // If slave address is between 8 and 119 then move to SEND state
        if (addr > 7 && addr < 120) {
 14a:	87 50       	subi	r24, 0x07	; 7
 14c:	80 37       	cpi	r24, 0x70	; 112
 14e:	20 f4       	brcc	.+8      	; 0x158 <__vector_13+0x80>
            state = STATE_SEND;
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 156:	4a c0       	rjmp	.+148    	; 0x1ec <__vector_13+0x114>
        }
        else {
            addr = 7;
 158:	87 e0       	ldi	r24, 0x07	; 7
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            state = STATE_IDLE;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 164:	43 c0       	rjmp	.+134    	; 0x1ec <__vector_13+0x114>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16a:	88 0f       	add	r24, r24
 16c:	0e 94 1f 01 	call	0x23e	; 0x23e <twi_start>
 170:	18 2f       	mov	r17, r24
        twi_stop();
 172:	0e 94 3d 01 	call	0x27a	; 0x27a <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
        if (result == 0) {
 176:	11 11       	cpse	r17, r1
 178:	04 c0       	rjmp	.+8      	; 0x182 <__vector_13+0xaa>
            state = STATE_ACK;
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 180:	35 c0       	rjmp	.+106    	; 0x1ec <__vector_13+0x114>
        }
        else {
            state = STATE_IDLE;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 188:	31 c0       	rjmp	.+98     	; 0x1ec <__vector_13+0x114>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 18e:	4a e0       	ldi	r20, 0x0A	; 10
 190:	be 01       	movw	r22, r28
 192:	6f 5f       	subi	r22, 0xFF	; 255
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__itoa_ncheck>
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a0:	40 e1       	ldi	r20, 0x10	; 16
 1a2:	be 01       	movw	r22, r28
 1a4:	6b 5f       	subi	r22, 0xFB	; 251
 1a6:	7f 4f       	sbci	r23, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__itoa_ncheck>
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
        
        itoa(addr, uart_string_dec, 10);
        itoa(addr, uart_string_bin, 16);
        uart_puts("Address found: ");
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_puts>
        uart_puts(uart_string_dec);
 1b6:	ce 01       	movw	r24, r28
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_puts>
        uart_puts("[0x");
 1be:	80 e3       	ldi	r24, 0x30	; 48
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_puts>
        uart_puts(uart_string_bin);
 1c6:	ce 01       	movw	r24, r28
 1c8:	05 96       	adiw	r24, 0x05	; 5
 1ca:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_puts>
        uart_puts("]");
 1ce:	84 e3       	ldi	r24, 0x34	; 52
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_puts>
        uart_puts("\n\r");
 1d6:	86 e3       	ldi	r24, 0x36	; 54
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_puts>
        
        
        state = STATE_IDLE;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <__vector_13+0x114>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
    }
 1ec:	2c 96       	adiw	r28, 0x0c	; 12
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	1f 91       	pop	r17
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 220:	87 b1       	in	r24, 0x07	; 7
 222:	8f 7c       	andi	r24, 0xCF	; 207
 224:	87 b9       	out	0x07, r24	; 7
 226:	88 b1       	in	r24, 0x08	; 8
 228:	80 63       	ori	r24, 0x30	; 48
 22a:	88 b9       	out	0x08, r24	; 8
 22c:	e9 eb       	ldi	r30, 0xB9	; 185
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8c 7f       	andi	r24, 0xFC	; 252
 234:	80 83       	st	Z, r24
 236:	88 e9       	ldi	r24, 0x98	; 152
 238:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 23c:	08 95       	ret

0000023e <twi_start>:
 23e:	94 ea       	ldi	r25, 0xA4	; 164
 240:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 244:	ec eb       	ldi	r30, 0xBC	; 188
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	90 81       	ld	r25, Z
 24a:	99 23       	and	r25, r25
 24c:	ec f7       	brge	.-6      	; 0x248 <twi_start+0xa>
 24e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 252:	84 e8       	ldi	r24, 0x84	; 132
 254:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 258:	ec eb       	ldi	r30, 0xBC	; 188
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 23       	and	r24, r24
 260:	ec f7       	brge	.-6      	; 0x25c <twi_start+0x1e>
 262:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 266:	98 7f       	andi	r25, 0xF8	; 248
 268:	98 31       	cpi	r25, 0x18	; 24
 26a:	29 f0       	breq	.+10     	; 0x276 <twi_start+0x38>
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 34       	cpi	r25, 0x40	; 64
 270:	19 f4       	brne	.+6      	; 0x278 <twi_start+0x3a>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret

0000027a <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 27a:	84 e9       	ldi	r24, 0x94	; 148
 27c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 280:	08 95       	ret

00000282 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
 296:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 29a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 29e:	8c 71       	andi	r24, 0x1C	; 28
 2a0:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RxHead>
 2a4:	ef 5f       	subi	r30, 0xFF	; 255
 2a6:	ef 71       	andi	r30, 0x1F	; 31
 2a8:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_RxTail>
 2ac:	e9 17       	cp	r30, r25
 2ae:	39 f0       	breq	.+14     	; 0x2be <__vector_18+0x3c>
 2b0:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <UART_RxHead>
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	e9 5b       	subi	r30, 0xB9	; 185
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	20 83       	st	Z, r18
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <__vector_18+0x3e>
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end>
 2c4:	89 2b       	or	r24, r25
 2c6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	2f 91       	pop	r18
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_19>:
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
 2f0:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 2f4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART_TxTail>
 2f8:	98 17       	cp	r25, r24
 2fa:	69 f0       	breq	.+26     	; 0x316 <__vector_19+0x38>
 2fc:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_TxTail>
 300:	ef 5f       	subi	r30, 0xFF	; 255
 302:	ef 71       	andi	r30, 0x1F	; 31
 304:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_TxTail>
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	e9 59       	subi	r30, 0x99	; 153
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	80 81       	ld	r24, Z
 310:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 314:	05 c0       	rjmp	.+10     	; 0x320 <__vector_19+0x42>
 316:	e1 ec       	ldi	r30, 0xC1	; 193
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	8f 7d       	andi	r24, 0xDF	; 223
 31e:	80 83       	st	Z, r24
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <uart_init>:
 332:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxHead>
 336:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_TxTail>
 33a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxHead>
 33e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_RxTail>
 342:	99 23       	and	r25, r25
 344:	1c f4       	brge	.+6      	; 0x34c <uart_init+0x1a>
 346:	22 e0       	ldi	r18, 0x02	; 2
 348:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 34c:	90 78       	andi	r25, 0x80	; 128
 34e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 352:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 356:	88 e9       	ldi	r24, 0x98	; 152
 358:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 362:	08 95       	ret

00000364 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 364:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <UART_TxHead>
 368:	2f 5f       	subi	r18, 0xFF	; 255
 36a:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 36c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_TxTail>
 370:	29 17       	cp	r18, r25
 372:	e1 f3       	breq	.-8      	; 0x36c <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 374:	e2 2f       	mov	r30, r18
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	e9 59       	subi	r30, 0x99	; 153
 37a:	fe 4f       	sbci	r31, 0xFE	; 254
 37c:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 37e:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 382:	e1 ec       	ldi	r30, 0xC1	; 193
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	80 62       	ori	r24, 0x20	; 32
 38a:	80 83       	st	Z, r24
 38c:	08 95       	ret

0000038e <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
    while (*s)
 394:	88 81       	ld	r24, Y
 396:	88 23       	and	r24, r24
 398:	31 f0       	breq	.+12     	; 0x3a6 <uart_puts+0x18>
 39a:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 39c:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 3a0:	89 91       	ld	r24, Y+
 3a2:	81 11       	cpse	r24, r1
 3a4:	fb cf       	rjmp	.-10     	; 0x39c <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <__itoa_ncheck>:
 3ac:	bb 27       	eor	r27, r27
 3ae:	4a 30       	cpi	r20, 0x0A	; 10
 3b0:	31 f4       	brne	.+12     	; 0x3be <__itoa_ncheck+0x12>
 3b2:	99 23       	and	r25, r25
 3b4:	22 f4       	brpl	.+8      	; 0x3be <__itoa_ncheck+0x12>
 3b6:	bd e2       	ldi	r27, 0x2D	; 45
 3b8:	90 95       	com	r25
 3ba:	81 95       	neg	r24
 3bc:	9f 4f       	sbci	r25, 0xFF	; 255
 3be:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__utoa_common>

000003c2 <__utoa_ncheck>:
 3c2:	bb 27       	eor	r27, r27

000003c4 <__utoa_common>:
 3c4:	fb 01       	movw	r30, r22
 3c6:	55 27       	eor	r21, r21
 3c8:	aa 27       	eor	r26, r26
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	aa 1f       	adc	r26, r26
 3d0:	a4 17       	cp	r26, r20
 3d2:	10 f0       	brcs	.+4      	; 0x3d8 <__utoa_common+0x14>
 3d4:	a4 1b       	sub	r26, r20
 3d6:	83 95       	inc	r24
 3d8:	50 51       	subi	r21, 0x10	; 16
 3da:	b9 f7       	brne	.-18     	; 0x3ca <__utoa_common+0x6>
 3dc:	a0 5d       	subi	r26, 0xD0	; 208
 3de:	aa 33       	cpi	r26, 0x3A	; 58
 3e0:	08 f0       	brcs	.+2      	; 0x3e4 <__utoa_common+0x20>
 3e2:	a9 5d       	subi	r26, 0xD9	; 217
 3e4:	a1 93       	st	Z+, r26
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	79 f7       	brne	.-34     	; 0x3c8 <__utoa_common+0x4>
 3ea:	b1 11       	cpse	r27, r1
 3ec:	b1 93       	st	Z+, r27
 3ee:	11 92       	st	Z+, r1
 3f0:	cb 01       	movw	r24, r22
 3f2:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <strrev>

000003f6 <strrev>:
 3f6:	dc 01       	movw	r26, r24
 3f8:	fc 01       	movw	r30, r24
 3fa:	67 2f       	mov	r22, r23
 3fc:	71 91       	ld	r23, Z+
 3fe:	77 23       	and	r23, r23
 400:	e1 f7       	brne	.-8      	; 0x3fa <strrev+0x4>
 402:	32 97       	sbiw	r30, 0x02	; 2
 404:	04 c0       	rjmp	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 406:	7c 91       	ld	r23, X
 408:	6d 93       	st	X+, r22
 40a:	70 83       	st	Z, r23
 40c:	62 91       	ld	r22, -Z
 40e:	ae 17       	cp	r26, r30
 410:	bf 07       	cpc	r27, r31
 412:	c8 f3       	brcs	.-14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 414:	08 95       	ret

00000416 <_exit>:
 416:	f8 94       	cli

00000418 <__stop_program>:
 418:	ff cf       	rjmp	.-2      	; 0x418 <__stop_program>
