
level.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ce  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074b  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037b  00000000  00000000  0000136d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000be  00000000  00000000  00001bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 75 00 	call	0xea	; 0xea <main>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_nopull>:
  98:	fc 01       	movw	r30, r24
  9a:	80 81       	ld	r24, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_nopull+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_nopull+0xa>
  aa:	20 95       	com	r18
  ac:	82 23       	and	r24, r18
  ae:	80 83       	st	Z, r24
  b0:	81 81       	ldd	r24, Z+1	; 0x01
  b2:	28 23       	and	r18, r24
  b4:	21 83       	std	Z+1, r18	; 0x01
  b6:	08 95       	ret

000000b8 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  b8:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  ba:	90 81       	ld	r25, Z
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <GPIO_write_low+0xe>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <GPIO_write_low+0xa>
  ca:	20 95       	com	r18
  cc:	29 23       	and	r18, r25
  ce:	20 83       	st	Z, r18
  d0:	08 95       	ret

000000d2 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  d2:	fc 01       	movw	r30, r24
  d4:	40 81       	ld	r20, Z
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <GPIO_write_high+0xe>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <GPIO_write_high+0xa>
  e4:	24 2b       	or	r18, r20
  e6:	20 83       	st	Z, r18
  e8:	08 95       	ret

000000ea <main>:
int main(void)
{
    /* Replace with your application code */
    uint8_t pin_trigger = 7;
    uint8_t pin_echo = 6;
    GPIO_config_output(&DDRD, pin_trigger);
  ea:	67 e0       	ldi	r22, 0x07	; 7
  ec:	8a e2       	ldi	r24, 0x2A	; 42
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_config_input_nopull(&DDRD, pin_echo);
  f4:	66 e0       	ldi	r22, 0x06	; 6
  f6:	8a e2       	ldi	r24, 0x2A	; 42
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_nopull>
    
    while (1) 
    {
        GPIO_write_high(&PORTD, pin_trigger);
  fe:	67 e0       	ldi	r22, 0x07	; 7
 100:	8b e2       	ldi	r24, 0x2B	; 43
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x20>
 10e:	00 00       	nop
        _delay_us(10);
        GPIO_write_low(&PORTD, pin_trigger);
 110:	67 e0       	ldi	r22, 0x07	; 7
 112:	8b e2       	ldi	r24, 0x2B	; 43
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 5c 00 	call	0xb8	; 0xb8 <GPIO_write_low>
 11a:	f1 cf       	rjmp	.-30     	; 0xfe <main+0x14>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
