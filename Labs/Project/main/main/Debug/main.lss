
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa0  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000756  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000398  00000000  00000000  0000149a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001834  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047d  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d8  00000000  00000000  00001d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001f41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  78:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  98:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  9a:	90 81       	ld	r25, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_write_low+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_write_low+0xa>
  aa:	20 95       	com	r18
  ac:	29 23       	and	r18, r25
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  b2:	fc 01       	movw	r30, r24
  b4:	40 81       	ld	r20, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIO_write_high+0xe>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIO_write_high+0xa>
  c4:	24 2b       	or	r18, r20
  c6:	20 83       	st	Z, r18
  c8:	08 95       	ret

000000ca <delay_minutes>:
#include <avr/io.h>
#include "gpio.h"

void delay_minutes(uint8_t minutes)
{
	for(minutes; minutes > 0; minutes--)
  ca:	81 11       	cpse	r24, r1
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <delay_minutes+0x2a>
  ce:	08 95       	ret
        {
		    for(int i = 4000; i > 0; i--)     //
		    {                                 // second
			    for(int j = 4000; j > 0; j--) //
			    {
				    asm("nop");
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
	{
        for(int k = 60; k > 0; k--)
        {
		    for(int i = 4000; i > 0; i--)     //
		    {                                 // second
			    for(int j = 4000; j > 0; j--) //
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_minutes+0x6>
  d8:	41 50       	subi	r20, 0x01	; 1
  da:	51 09       	sbc	r21, r1
{
	for(minutes; minutes > 0; minutes--)
	{
        for(int k = 60; k > 0; k--)
        {
		    for(int i = 4000; i > 0; i--)     //
  dc:	19 f0       	breq	.+6      	; 0xe4 <delay_minutes+0x1a>

#include <avr/io.h>
#include "gpio.h"

void delay_minutes(uint8_t minutes)
{
  de:	20 ea       	ldi	r18, 0xA0	; 160
  e0:	3f e0       	ldi	r19, 0x0F	; 15
  e2:	f6 cf       	rjmp	.-20     	; 0xd0 <delay_minutes+0x6>
  e4:	61 50       	subi	r22, 0x01	; 1
  e6:	71 09       	sbc	r23, r1
	for(minutes; minutes > 0; minutes--)
	{
        for(int k = 60; k > 0; k--)
  e8:	19 f0       	breq	.+6      	; 0xf0 <delay_minutes+0x26>

#include <avr/io.h>
#include "gpio.h"

void delay_minutes(uint8_t minutes)
{
  ea:	40 ea       	ldi	r20, 0xA0	; 160
  ec:	5f e0       	ldi	r21, 0x0F	; 15
  ee:	f7 cf       	rjmp	.-18     	; 0xde <delay_minutes+0x14>
	for(minutes; minutes > 0; minutes--)
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	19 f0       	breq	.+6      	; 0xfa <delay_minutes+0x30>

#include <avr/io.h>
#include "gpio.h"

void delay_minutes(uint8_t minutes)
{
  f4:	6c e3       	ldi	r22, 0x3C	; 60
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	f8 cf       	rjmp	.-16     	; 0xea <delay_minutes+0x20>
  fa:	08 95       	ret

000000fc <main>:
	}
}

int main(void)
{
	GPIO_config_output(DDRD, 2); //
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_config_output(DDRD, 3); // outputs, pump control
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	63 e0       	ldi	r22, 0x03	; 3
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
 110:	c5 e0       	ldi	r28, 0x05	; 5
						current_state = PUMP_OFF;
					}
				}
				
			case PUMP_IN:
				GPIO_write_low(DDRD, 2);
 112:	8a b1       	in	r24, 0x0a	; 10
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
				GPIO_write_low(DDRD, 3);
 11c:	8a b1       	in	r24, 0x0a	; 10
 11e:	63 e0       	ldi	r22, 0x03	; 3
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
				delay_minutes(1);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 65 00 	call	0xca	; 0xca <delay_minutes>
				{
					current_state = PUMP_OFF;
				}
				
			case PUMP_OUT:
				GPIO_write_high(DDRD, 2);
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
				GPIO_write_high(DDRD, 3);
 136:	8a b1       	in	r24, 0x0a	; 10
 138:	63 e0       	ldi	r22, 0x03	; 3
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
				delay_minutes(1);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 65 00 	call	0xca	; 0xca <delay_minutes>
				{
					current_state = PUMP_OFF;
				}
				
			case PUMP_OFF:
				GPIO_write_high(DDRD, 2);
 146:	8a b1       	in	r24, 0x0a	; 10
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
				GPIO_write_low(DDRD, 3);
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	63 e0       	ldi	r22, 0x03	; 3
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
				delay_minutes(delay_val);
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 65 00 	call	0xca	; 0xca <delay_minutes>
 160:	d8 cf       	rjmp	.-80     	; 0x112 <main+0x16>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
