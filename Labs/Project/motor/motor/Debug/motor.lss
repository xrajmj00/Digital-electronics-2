
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006dd  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000291  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004e  00000000  00000000  0000154d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_1s>:
#define m_in_1 2
#define m_in_2 3

void delay_1s (void)
{
	for(int i = 4000; i > 0; i--)
  80:	20 ea       	ldi	r18, 0xA0	; 160
  82:	3f e0       	ldi	r19, 0x0F	; 15
  84:	0b c0       	rjmp	.+22     	; 0x9c <delay_1s+0x1c>
	{
		for(int i = 400; i > 0; i--)
		{
			asm("nop");
  86:	00 00       	nop

void delay_1s (void)
{
	for(int i = 4000; i > 0; i--)
	{
		for(int i = 400; i > 0; i--)
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <delay_1s+0x10>
  8c:	80 e9       	ldi	r24, 0x90	; 144
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	18 16       	cp	r1, r24
  92:	19 06       	cpc	r1, r25
  94:	c4 f3       	brlt	.-16     	; 0x86 <delay_1s+0x6>
		{
			asm("nop");
		}
		asm("nop");
  96:	00 00       	nop
#define m_in_1 2
#define m_in_2 3

void delay_1s (void)
{
	for(int i = 4000; i > 0; i--)
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	31 09       	sbc	r19, r1
  9c:	12 16       	cp	r1, r18
  9e:	13 06       	cpc	r1, r19
  a0:	ac f3       	brlt	.-22     	; 0x8c <delay_1s+0xc>
		{
			asm("nop");
		}
		asm("nop");
	}
}
  a2:	08 95       	ret

000000a4 <main>:

int main(void)
{
	DDRD |= (1<<m_in_1);
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<m_in_2);
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	8a b9       	out	0x0a, r24	; 10
	
    /* Replace with your application code */
    while (1) 
    {
		PORTD &= ~(1<<m_in_1);
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<m_in_2);
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	8b b9       	out	0x0b, r24	; 11
		
		delay_1s();
  bc:	0e 94 40 00 	call	0x80	; 0x80 <delay_1s>
		
		PORTD |=  (1<<m_in_1);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<m_in_2);
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	87 7f       	andi	r24, 0xF7	; 247
  ca:	8b b9       	out	0x0b, r24	; 11
		
		delay_1s();
  cc:	0e 94 40 00 	call	0x80	; 0x80 <delay_1s>
		
		PORTD &= ~(1<<m_in_1);
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	8b 7f       	andi	r24, 0xFB	; 251
  d4:	8b b9       	out	0x0b, r24	; 11
		PORTD |=  (1<<m_in_2);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	8b b9       	out	0x0b, r24	; 11
		
		delay_1s();
  dc:	0e 94 40 00 	call	0x80	; 0x80 <delay_1s>
  e0:	e7 cf       	rjmp	.-50     	; 0xb0 <main+0xc>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
